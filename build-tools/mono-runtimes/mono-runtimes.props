<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <_HostWinCFlags Condition=" '$(Configuration)' == 'Debug' ">-ggdb3 -O0 -DXAMARIN_PRODUCT_VERSION=0</_HostWinCFlags>
    <_HostWinCFlags Condition=" '$(Configuration)' == 'Release' ">-g -O2 -DXAMARIN_PRODUCT_VERSION=0</_HostWinCFlags>
  </PropertyGroup>

  <!-- LLVM+cross common -->
  <PropertyGroup>
    <_CrossOutputDirTop>$([System.IO.Path]::GetFullPath ('$(IntermediateOutputPath)'))</_CrossOutputDirTop>
    <_MingwCc32>$(MingwCommandPrefix32)-gcc</_MingwCc32>
    <_MingwCxx32>$(MingwCommandPrefix32)-g++</_MingwCxx32>
    <_MingwCc64>$(MingwCommandPrefix64)-gcc</_MingwCc64>
    <_MingwCxx64>$(MingwCommandPrefix64)-g++</_MingwCxx64>
    <_MingwTriplet32>i686-w64-mingw32$(_MingwPrefixTail)</_MingwTriplet32>
    <_MingwTriplet64>x86_64-w64-mingw32$(_MingwPrefixTail)</_MingwTriplet64>

    <!-- LLVM -->
    <_LlvmCanBuild64 Condition=" '$(HostBits)' == '64' ">yes</_LlvmCanBuild64>

    <_LlvmPrefix32>$(MonoSourceFullPath)\sdks\out\llvm-llvm32</_LlvmPrefix32>
    <_LlvmPrefix64>$(MonoSourceFullPath)\sdks\out\llvm-llvm64</_LlvmPrefix64>

    <_LlvmPrefixWin32>$(MonoSourceFullPath)\sdks\out\llvm-llvmwin32</_LlvmPrefixWin32>
    <_LlvmPrefixWin64>$(MonoSourceFullPath)\sdks\out\llvm-llvmwin64</_LlvmPrefixWin64>

    <!-- Cross compilers -->
    <_AotOffsetsDumperName>MonoAotOffsetsDumper.exe</_AotOffsetsDumperName>
    <_AotOffsetsDumperSourceDir>$(MonoSourceFullPath)\tools\offsets-tool</_AotOffsetsDumperSourceDir>
    <_CrossDefaultLlvmPrefix Condition=" '$(_LlvmCanBuild64)' == 'yes' ">$(_LlvmPrefix64)</_CrossDefaultLlvmPrefix>
    <_CrossDefaultLlvmPrefix Condition=" '$(_LlvmCanBuild64)' != 'yes' ">$(_LlvmPrefix32)</_CrossDefaultLlvmPrefix>
    <_CrossOutputPrefix>$(_CrossOutputDirTop)\cross-</_CrossOutputPrefix>
    <_CrossConfigureCachePrefix>$(_CrossOutputDirTop)cross-</_CrossConfigureCachePrefix>
    <_CrossDebugCFlags Condition=" '$(Configuration)' == 'Debug'">-DDEBUG_CROSS</_CrossDebugCFlags>
    <_CrossCommonCFlags>$(_CrossDebugCFlags) -DXAMARIN_PRODUCT_VERSION=0</_CrossCommonCFlags>
    <_CrossCommonCXXFlags>$(_CrossCommonCFlags)</_CrossCommonCXXFlags>
    <_CrossCommonConfigureFlags>--disable-boehm --enable-mcs-build=no --enable-nls=no --enable-maintainer-mode --enable-extension-module --with-tls=pthread</_CrossCommonConfigureFlags>
  </PropertyGroup>

  <!-- LLVM+cross OSX -->
  <PropertyGroup Condition=" '$(HostOS)' == 'Darwin' ">
    <_OSXMinVersion>-mmacosx-version-min=10.9</_OSXMinVersion>
    <_CrossConfigureBuildHost32>$(HostTriplet32)</_CrossConfigureBuildHost32>
    <_CrossConfigureBuildHost64>$(HostTriplet64)</_CrossConfigureBuildHost64>
    <_CrossConfigureBuildHostWin32>$(_MingwTriplet32)</_CrossConfigureBuildHostWin32>
    <_CrossConfigureBuildHostWin64>$(_MingwTriplet64)</_CrossConfigureBuildHostWin64>
    <_CrossOSXCommonCompilerFlags>$(_OSXMinVersion)</_CrossOSXCommonCompilerFlags>
    <_CrossCFlags>$(_CrossCommonCFlags) $(_CrossOSXCommonCompilerFlags)</_CrossCFlags>
    <_CrossCFlagsWin>$(_CrossCommonCFlags)</_CrossCFlagsWin>
    <_CrossCXXFlags>$(_CrossCommonCXXFlags) $(_CrossOSXCommonCompilerFlags) -stdlib=libc++</_CrossCXXFlags>
    <_CrossCXXFlagsWin>$(_CrossCommonCXXFlags)</_CrossCXXFlagsWin>
    <_CrossConfigureFlags32>--build=$(_CrossConfigureBuildHost32) $(_CrossCommonConfigureFlags)</_CrossConfigureFlags32>
    <_CrossConfigureFlags64>--build=$(_CrossConfigureBuildHost64) $(_CrossCommonConfigureFlags)</_CrossConfigureFlags64>
    <_CrossConfigureFlags>$(_CrossConfigureFlags64)</_CrossConfigureFlags>
  </PropertyGroup>

  <!-- LLVM+cross Linux -->
  <PropertyGroup Condition=" '$(HostOS)' == 'Linux' ">
    <_CrossConfigureBuildHost32>$(HostTriplet32)</_CrossConfigureBuildHost32>
    <_CrossConfigureBuildHost64>$(HostTriplet64)</_CrossConfigureBuildHost64>
    <_CrossConfigureBuildHost>$(HostTriplet)</_CrossConfigureBuildHost>
    <_CrossConfigureBuildHostWin32>$(_MingwTriplet32)</_CrossConfigureBuildHostWin32>
    <_CrossConfigureBuildHostWin64>$(_MingwTriplet64)</_CrossConfigureBuildHostWin64>

    <_CrossCFlags>$(_CrossCommonCFlags)</_CrossCFlags>
    <_CrossCFlagsWin>$(_CrossCFlags)</_CrossCFlagsWin>
    <_CrossCXXFlags>$(_CrossCommonCXXFlags)</_CrossCXXFlags>
    <_CrossCXXFlagsWin>$(_CrossCXXFlags)</_CrossCXXFlagsWin>
    <_CrossConfigureFlags32>--build=$(_CrossConfigureBuildHost32) $(_CrossCommonConfigureFlags)</_CrossConfigureFlags32>
    <_CrossConfigureFlags64>--build=$(_CrossConfigureBuildHost64) $(_CrossCommonConfigureFlags)</_CrossConfigureFlags64>
    <_CrossConfigureFlags Condition=" '$(HostBits)' == '64' " >$(_CrossConfigureFlags64)</_CrossConfigureFlags>
    <_CrossConfigureFlags Condition=" '$(HostBits)' == '32' " >$(_CrossConfigureFlags32)</_CrossConfigureFlags>
  </PropertyGroup>

  <!-- Mono runtimes settings -->
  <PropertyGroup>
    <_ArmStrip>$(AndroidToolchainDirectory)\toolchains\arm-linux-androideabi-clang\bin\arm-linux-androideabi-strip</_ArmStrip>
  </PropertyGroup>
  <PropertyGroup>
    <_Arm64Strip>$(AndroidToolchainDirectory)\toolchains\aarch64-linux-android-clang\bin\aarch64-linux-android-strip</_Arm64Strip>
  </PropertyGroup>
  <PropertyGroup>
    <_X86Strip>$(AndroidToolchainDirectory)\toolchains\i686-linux-android-clang\bin\i686-linux-android-strip</_X86Strip>
  </PropertyGroup>
  <PropertyGroup>
    <_X86_64Strip>$(AndroidToolchainDirectory)\toolchains\x86_64-linux-android-clang\bin\x86_64-linux-android-strip</_X86_64Strip>
  </PropertyGroup>
  <PropertyGroup>
    <_HostWin64CFlags>$(_HostWinCFlags)</_HostWin64CFlags>
  </PropertyGroup>
</Project>
